# from bin.imports.OpenGL import *
# from math import sin, cos
# import numpy as np

# Qobject: object


# def CalculateRotationMatrix(angle:float) -> np.ndarray:
#     from math import sin, cos
#     import numpy as np

#     def RotateY(angle:float) -> np.ndarray:
#         s = sin(angle)
#         c = cos(angle)
#         return np.array([[c, 0, s], [0, 1, 0], [-s, 0, c]])

#     def RotateX(angle:float) -> np.ndarray:
#         s = sin(angle)
#         c = cos(angle)
#         return np.array([[1, 0, 0], [0, c, s], [0, -s, c]])

#     def RotateZ(angle:float) -> np.ndarray:
#         s = sin(angle)
#         c = cos(angle)
#         return np.array([[c, s, 0], [-s, c, 0], [0, 0, 1]])
#     return RotateY(angle) * RotateX(angle) * RotateZ(angle)

# currentWaveAngle = sin(Qobject.times) * 10

# rotation = CalculateRotationMatrix(currentWaveAngle)

# rot = None

# l=[]
# for i in rotation:
#     for j in i:
#         l.append(j)
# rot = np.array(l)

# glUniformMatrix3fv(Qobject.shader_program.uniformLocation("rot"), 1, GL_FALSE, rot)