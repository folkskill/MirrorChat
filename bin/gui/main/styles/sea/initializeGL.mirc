from bin.imports.MCmain import *
from bin.imports.OpenGL import *

Qobject: object

Qobject.shader_program = QOpenGLShaderProgram(Qobject)
# 顶点着色器
Qobject.shader_program.addShaderFromSourceCode(QOpenGLShader.ShaderTypeBit.Vertex, """
#version 330 core
layout(location = 0) in vec3 aPos;
void main() {
    gl_Position = vec4(aPos, 1.0);
}
""")
# 片段着色器，输出白色
Qobject.shader_program.addShaderFromSourceCode(QOpenGLShader.ShaderTypeBit.Fragment, """
#version 330 core

#define MAX_STEP 64
#define WAVE_NUM 11
#define CONNECT_DENSITY 0.38
#define NORMAL_ITERATIONS 36
#define WATER_DEPTH 1.0
#define MAX_DIST 50

vec3 cameraPos = vec3(-2.3, 1.1, -5);  // 摄像机位置
vec3 Up = vec3(0, 1, 0);          // 上方向
vec3 Right = vec3(1, 0, 0);       // 右方向
vec3 Forward = vec3(0, 0, 1);     // 前方向

// 固定时间值（如果需要动画效果可以保留iTime）
uniform float iTime;

// 固定旋转矩阵（不旋转）
uniform mat3 rot = mat3(
    1.0, 0.0, 0.0,
    0.0, 1.0, 0.0,
    0.0, 0.0, 1.0
);
uniform sampler2D cubeTexture;
uniform sampler2D screenTexture;

in vec2 TexCoord;
out vec4 FragColor;

// Constants
const vec3 fogColor = vec3(0.7, 0.8, 0.9);
const vec3 sunDir = normalize(vec3(0.5, -0.5, 0.0));
const vec3 sunColor = vec3(1.0);
const vec3 SeaUp = vec3(0.0);
const vec3 SeaDown = vec3(1.0, 0.9, 0.7) * 0.8;
vec3 CubePos = vec3(0.0, -1.0, 0.0);
const vec3 CubeSize = vec3(1.0);

// Function declarations
float intersectPlane(vec3 origin, vec3 direction, vec3 point, vec3 normal);
mat3 RotateY(float angle);
mat3 RotateX(float angle);
mat3 RotateZ(float angle);
float GetCubeDist(vec3 rayDir, vec3 start);
float GetCubeDistNoAgainst(vec3 rayDir, vec3 start);
vec2 GetDist(vec3 dir, vec3 falt, vec3 start);
float distanceToCube(vec3 point);
vec2 GetCeritaWave(vec2 dir, vec2 pos, float density, float Time);
float getSeaHigh(vec2 pos, int iterations, int pattern);
vec3 rayMarching(vec3 dir, vec2 uv);
vec3 GetuNormal(vec3 pos, float e, float depth);
vec3 GetCubeNormal(vec3 pos);
vec3 calculateRefraction(vec3 ray, vec3 N, float n1, float n2);
vec3 madeFlower(vec3 faltN, vec3 waterN);

float intersectPlane(vec3 origin, vec3 direction, vec3 point, vec3 normal) { 
    return clamp(dot(point - origin, normal) / dot(direction, normal), -1.0, 9991999.0); 
}

mat3 RotateY(float angle) {
    float s = sin(angle);
    float c = cos(angle);
    return mat3(
        c, 0.0, s,
        0.0, 1.0, 0.0,
        -s, 0.0, c
    );
}

mat3 RotateX(float angle) {
    float s = sin(angle);
    float c = cos(angle);
    return mat3(
        1.0, 0.0, 0.0,
        0.0, c, -s,
        0.0, s, c
    );
}

mat3 RotateZ(float angle) {
    float s = sin(angle);
    float c = cos(angle);
    return mat3(
        c, -s, 0.0,
        s, c, 0.0,
        0.0, 0.0, 1.0
    );
}

float GetCubeDist(vec3 rayDir, vec3 start) {
    vec3 localRayOrigin = rot * (start - CubePos);
    vec3 localRayDir = rot * rayDir;
    
    vec3 invRayDir = 1.0 / localRayDir;
    vec3 t0 = (-CubeSize - localRayOrigin) * invRayDir;
    vec3 t1 = (CubeSize - localRayOrigin) * invRayDir;
    
    vec3 tmin = min(t0, t1);
    vec3 tmax = max(t0, t1);
    
    float enterDist = max(max(tmin.x, tmin.y), tmin.z);
    float exitDist = min(min(tmax.x, tmax.y), tmax.z);
    
    if (exitDist < enterDist || exitDist < 0.0) {
        return -1.0;
    }
    
    return (enterDist > 0.0) ? enterDist : exitDist;
}

float GetCubeDistNoAgainst(vec3 rayDir, vec3 start) {
    vec3 localRayOrigin = rot * (start - CubePos);
    vec3 localRayDir = rot * rayDir;
    
    vec3 invRayDir = 1.0 / localRayDir;
    vec3 t0 = (-CubeSize - localRayOrigin) * invRayDir;
    vec3 t1 = (CubeSize - localRayOrigin) * invRayDir;
    
    vec3 tmin = min(t0, t1);
    vec3 tmax = max(t0, t1);
    
    float enterDist = max(max(tmin.x, tmin.y), tmin.z);
    float exitDist = min(min(tmax.x, tmax.y), tmax.z);
    
    if (exitDist >= enterDist && exitDist >= 0.0) {
        return (enterDist > 0.0) ? enterDist : exitDist;
    }
    
    vec3 closestPoint = max(min(localRayOrigin, CubeSize), -CubeSize);
    return length(closestPoint - localRayOrigin) / length(localRayDir);
}

vec2 GetDist(vec3 dir, vec3 falt, vec3 start) {
    float cubeDist = GetCubeDist(dir, start);
    if(cubeDist < 0.0) {
        return vec2(0.0, cubeDist);
    }
    
    float seaDist = intersectPlane(start, dir, SeaUp, vec3(0.0, 1.0, 0.0));
    vec3 SeaPoint = vec3(start + normalize(dir) * seaDist);

    if (cubeDist > 0.0 && (seaDist < 0.0 || cubeDist < seaDist)) {
        return vec2(1.0, cubeDist);
    }
    else if (seaDist > 0.0) {
        return vec2(0.0, seaDist);
    }
    
    return vec2(-1.0);
}

float distanceToCube(vec3 point) {
    vec3 localPoint = rot * (point - CubePos);
    vec3 closest = clamp(localPoint, -CubeSize, CubeSize);
    return length(localPoint - closest);
}

vec2 GetCeritaWave(vec2 dir, vec2 pos, float density, float Time) {
    float x = (dot(dir, pos) * density) + Time;
    float wave = exp(sin(x) - 1.0);
    float dx = wave * cos(x);
    return vec2(wave, -dx);
}

float getSeaHigh(vec2 pos, int iterations, int pattern) {
    float nowiust = 0.0;
    float LastHigh = 0.0;
    float ALLWight = 0.0;
    float wight = 2.0;
    float density = 1.0;
    float timeMultiplier = 2.0;

    if(abs(pos.x) < CubeSize.x && abs(pos.y) < CubeSize.z) {
        return -20.0;
    }
    
    int NowNNum;
    if(pattern == 1) {
        float distFix = 1.0 - smoothstep(1.0, 60.0, length(pos - cameraPos.xz));
        NowNNum = int(distFix * float(iterations) + 1.0);
    }

    if(pattern == 0) NowNNum = iterations;
    
    for(int i = 0; i < NowNNum; i++) {
        vec2 waveDir = vec2(sin(nowiust), cos(nowiust));
        vec2 high = GetCeritaWave(waveDir, pos, density, iTime + timeMultiplier);
        
        LastHigh += high.x * wight;
        ALLWight += wight;
        wight = mix(wight, 0.0, 0.2);
        
        pos += waveDir * high.y * wight * CONNECT_DENSITY;
        density *= 1.18;
        nowiust += 1232.399963;
        timeMultiplier *= 1.07;
    }    
    
    return LastHigh / ALLWight - 1.0;
}

vec3 rayMarching(vec3 dir, vec2 uv) {
    float Updistancea = intersectPlane(cameraPos, dir, SeaUp, vec3(0.0, 1.0, 0.0));
    float Downdistance = intersectPlane(cameraPos, dir, SeaDown, vec3(0.0, 1.0, 0.0));

    vec2 cubeDist = GetDist(dir, SeaUp, cameraPos);
    vec3 start = cameraPos + normalize(dir) * Updistancea;

    if(cubeDist.x == 0.0) {
        float CubeDista = GetCubeDist(dir, cameraPos);
        if (CubeDista > 50.0) {
            return vec3(0.0, 1.0, 0.0);
        }

        for(int i = 0; i < MAX_STEP; i++) {
            float nowhigh = getSeaHigh(start.xz, WAVE_NUM, 0);
            
            if(start.y <= nowhigh + 0.01) {
                float SeaDista = length(cameraPos - start);
                if((CubeDista <= SeaDista) && (CubeDista > 0.0)) return vec3(CubeDista, CubeDista, 1.0);
                else if((CubeDista > SeaDista) && (CubeDista > 0.0)) return vec3(SeaDista, nowhigh, 2.0);
                else if((CubeDista > SeaDista) && (CubeDista <= 0.0)) return vec3(SeaDista, nowhigh, 0.0);
                else return vec3(SeaDista, nowhigh, 0.0);
            }
            start += normalize(dir) * (start.y - nowhigh);
        }
    }
    else if(cubeDist.x == 1.0) {
        cubeDist.x = -2.0;
        return vec3(cubeDist, 1.0);
    }
    
    return vec3(0.0);
}

vec3 GetuNormal(vec3 pos, float e, float depth) {
    float H = getSeaHigh(pos.xz, NORMAL_ITERATIONS, 1) * depth;
    vec3 right = vec3(pos.x + e, getSeaHigh(vec2(pos.x + e, pos.z), NORMAL_ITERATIONS, 1) * depth, pos.z);
    vec3 left = vec3(pos.x - e, getSeaHigh(vec2(pos.x - e, pos.z), NORMAL_ITERATIONS, 1) * depth, pos.z);
    vec3 front = vec3(pos.x, getSeaHigh(vec2(pos.x, pos.z + e), NORMAL_ITERATIONS, 1) * depth, pos.z + e);
    vec3 back = vec3(pos.x, getSeaHigh(vec2(pos.x, pos.z - e), NORMAL_ITERATIONS, 1) * depth, pos.z - e);
    
    vec3 dx = right - left;
    vec3 dz = front - back;
    
    return normalize(cross(dz, dx));
}

vec3 GetCubeNormal(vec3 pos) {
    vec3 localPos = rot * (pos - CubePos);
    vec3 absPos = abs(localPos);
    float maxDist = max(max(absPos.x, absPos.y), absPos.z);
    
    if (maxDist == absPos.x) {
        return normalize(rot * vec3(sign(localPos.x), 0.0, 0.0));
    } else if (maxDist == absPos.y) {
        return normalize(rot * vec3(0.0, sign(localPos.y), 0.0));
    } else {
        return normalize(rot * vec3(0.0, 0.0, sign(localPos.z)));
    }
}

vec3 calculateRefraction(vec3 ray, vec3 N, float n1, float n2) {
    ray = normalize(ray);
    float eta = n1 / n2;
    float cosi = dot(-ray, N);
    float k = 1.0 - eta * eta * (1.0 - cosi * cosi);
    
    if (k < 0.0) {
        return vec3(0.0);
    } else {
        return eta * ray + (eta * cosi - sqrt(k)) * N;
    }
}

vec3 madeFlower(vec3 faltN, vec3 waterN) {
    vec3 result = vec3(0.0);
    float value = dot(faltN, waterN) / length(faltN) * length(waterN);
    if((value > 0.0) && (value < 0.707106)) {
        float valuew = smoothstep(0.0, 1.0, value);
        result = vec3(valuew);    
    }
    return result;
}

void main() {
    CubePos.y = sin(iTime / 3.0) / 2.0 - 0.6;
    vec2 iRect = vec2(800.0, 600.0);
    vec2 uv = (gl_FragCoord.xy - iRect.xy * 0.5) / iRect.y;
    vec3 ray = normalize(vec3(Forward + Right * uv.x + Up * uv.y));
    
    if(ray.y >= 0.0) {
        FragColor = vec4(fogColor, 1.0);
        return;
    }

    float seaDist = intersectPlane(cameraPos, ray, SeaUp, vec3(0.0, 1.0, 0.0));
    if(seaDist > MAX_DIST) {
        FragColor = vec4(fogColor, 1.0);
        return;
    }
    
    vec3 waveHigh = rayMarching(ray, uv);

    if(waveHigh.x == 0.0) {
        FragColor = vec4(fogColor, 1.0);
        return;
    }

    vec3 color = vec3(1.0);
    vec3 seaN = vec3(0.0);
    float dist;

    if((waveHigh.z == 0.0)) {
        dist = waveHigh.x;
        vec3 baseColor = mix(vec3(0.0, 0.3, 0.5), vec3(0.2, 0.8, 1.0), waveHigh.y);
        vec3 WaterPoint = cameraPos + normalize(ray) * dist;
        vec3 N = GetuNormal(WaterPoint, 0.01, 1.0);
        N = mix(N, vec3(0.0, 1.0, 0.0), 0.5 * min(1.0, dist * 0.005)); 
        seaN = N;
        
        float F0 = 0.04;
        float fresnel = F0 + (1.0 - F0) * pow(1.0 - max(0.0, dot(N, -ray)), 5.0);
        color = mix(vec3(fresnel * 0.5), vec3(0.2, 0.8, 1.0), 0.1);
    }
    else if((waveHigh.z == 2.0)) {
        dist = waveHigh.x;
        vec3 baseColor = mix(vec3(0.0, 0.3, 0.5), vec3(0.2, 0.8, 1.0), waveHigh.y);
        vec3 WaterPoint = cameraPos + normalize(ray) * dist;
        vec3 N = GetuNormal(WaterPoint, 0.01, 1.0);
        N = mix(N, vec3(0.0, 1.0, 0.0), 0.5 * min(1.0, dist * 0.005)); 
        seaN = N;
        
        float F0 = 0.04;
        float fresnel = F0 + (1.0 - F0) * pow(1.0 - max(0.0, dot(N, -ray)), 5.0);
        color = mix(vec3(fresnel * 0.5), vec3(0.2, 0.8, 1.0), 0.1);

        vec3 cubeRay = calculateRefraction(ray, N, 1.0, 1.33);
        float cubeGinstDist = GetCubeDist(cubeRay, WaterPoint);
        vec3 cubeGinst = WaterPoint + normalize(cubeRay) * cubeGinstDist;
        vec3 cubeN = GetCubeNormal(cubeGinst);

        if(GetCubeDist(cubeRay, cubeGinst) < 0.0) {
            color = mix(color, fogColor, min(dist/MAX_DIST, 1.0));
            FragColor = vec4(color, dist / MAX_DIST);
            return;
        }
        
        vec3 Pos = cubeGinst;
        vec3 localPos = rot * (Pos - CubePos);
        vec2 texCoord;
        vec3 absPos = abs(localPos);
        float maxDist = max(max(absPos.x, absPos.y), absPos.z);
    
        if (maxDist == absPos.x) {
            texCoord = localPos.x > 0.0 ? 
                      vec2(-localPos.z, localPos.y) / CubeSize.x : 
                      vec2(localPos.z, localPos.y) / CubeSize.x;
        } 
        else if (maxDist == absPos.y) {
            texCoord = localPos.y > 0.0 ? 
                      vec2(localPos.x, -localPos.z) / CubeSize.y : 
                      vec2(localPos.x, localPos.z) / CubeSize.y;
        } 
        else {
            texCoord = localPos.z > 0.0 ? 
                      vec2(localPos.x, localPos.y) / CubeSize.z : 
                      vec2(-localPos.x, localPos.y) / CubeSize.z;
        }
    
        texCoord = texCoord * 0.5 + 0.5;
        vec4 texColor = texture(cubeTexture, texCoord);

        float depthAtten = exp(-length(cubeGinst) * 0.5);
        texColor.rgb *= vec3(0.8, 0.9, 1.0) * depthAtten;

        float toCubeDist = length(WaterPoint - Pos);
        float fluency = 1.0 - smoothstep(0.0, 0.3, toCubeDist);
        vec3 finalColor = mix(texColor.xyz, color * 1.5, fluency);
        color = finalColor;
    } 
    else {
        vec3 Pos = cameraPos + normalize(ray) * waveHigh.y;
        vec3 localPos = rot * (Pos - CubePos);
        vec2 texCoord;
        vec3 absPos = abs(localPos);
        float maxDist = max(max(absPos.x, absPos.y), absPos.z);
    
        if (maxDist == absPos.x) {
            texCoord = localPos.x > 0.0 ? 
                      vec2(-localPos.z, localPos.y) / CubeSize.x : 
                      vec2(localPos.z, localPos.y) / CubeSize.x;
        } 
        else if (maxDist == absPos.y) {
            texCoord = localPos.y > 0.0 ? 
                      vec2(localPos.x, -localPos.z) / CubeSize.y : 
                      vec2(localPos.x, localPos.z) / CubeSize.y;
        } 
        else {
            texCoord = localPos.z > 0.0 ? 
                      vec2(localPos.x, localPos.y) / CubeSize.z : 
                      vec2(-localPos.x, localPos.y) / CubeSize.z;
        }
    
        texCoord = texCoord * 0.5 + 0.5;
        vec4 texColor = texture(cubeTexture, texCoord);

        vec3 N = GetCubeNormal(Pos);
        vec3 halfwayDir = -normalize(sunDir + ray);
        float spec = pow(max(0.0, dot(N, halfwayDir)), 32.0);
        vec3 specular = sunColor * spec * 0.5;
        
        vec3 finalColor = texColor.rgb * (0.7 + specular);
        finalColor = mix(finalColor, fogColor, min(waveHigh.y/MAX_DIST, 1.0));
        FragColor = vec4(finalColor, waveHigh.y / MAX_DIST);
        return;
    }

    color = mix(color, fogColor, min(dist/MAX_DIST, 1.0));
    FragColor = vec4(color, dist/MAX_DIST);
}
""")
Qobject.shader_program.link()

# 设置 VAO、VBO 和 EBO
Qobject.vao = QOpenGLVertexArrayObject()
Qobject.vao.create()
Qobject.vao.bind()

Qobject.vbo = QOpenGLBuffer(QOpenGLBuffer.Type.VertexBuffer)
Qobject.vbo.create()
Qobject.vbo.bind()
Qobject.vbo.allocate(Qobject.vertices.tobytes(), Qobject.vertices.nbytes)

Qobject.ebo = QOpenGLBuffer(QOpenGLBuffer.Type.IndexBuffer)
Qobject.ebo.create()
Qobject.ebo.bind()
Qobject.ebo.allocate(Qobject.indices.tobytes(), Qobject.indices.nbytes)

# 设置顶点属性指针
glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * 4, None)
glEnableVertexAttribArray(0)

Qobject.vao.release()
Qobject.vbo.release()
Qobject.ebo.release()